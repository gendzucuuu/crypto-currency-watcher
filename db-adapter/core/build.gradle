plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply(false)
    id 'java'
    id 'nu.studer.jooq' version '7.1.1'
}

group = 'by.gendzucuuu.crypto.currency.watcher.db.adapter'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
}

dependencies {
    implementation project(':db-adapter:model')
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.6.6'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    jooqGenerator 'org.postgresql:postgresql:42.3.2'
}


tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    version = '3.16.4'  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/crypto_currency_watcher'
                    user = 'u'
                    password = '1'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'db_adapter'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'by.gendzucuuu.crypto.currency.watcher.db.adapter.core'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    launcher = javaToolchains.launcherFor {

        languageVersion = JavaLanguageVersion.of(11)
    }
}
